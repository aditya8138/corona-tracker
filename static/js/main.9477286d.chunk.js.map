{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Charts/Charts.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","alt","src","coronaImage","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9477286d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\nimport styles from './Cards.module.css'\nimport CountUp from 'react-countup'\nimport cx from 'classnames'\n\nconst Cards = ({data:{confirmed, recovered, deaths, lastUpdate}}) => {\n\n  if(!confirmed){\n    return 'Loading...'\n  }\n  return(\n    <div className = {styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n          <CardContent>\n            <Typography color = \"textSecondary\" gutterBottom> Infected</Typography>\n            <Typography variant = \"h5\" >\n              <CountUp\n                start = {0}\n                end = {confirmed.value}\n                duration = {2.5}\n                separator =\",\"\n              ></CountUp>\n            </Typography>\n            <Typography color = \"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\n            <Typography variant = \"body2\">Number of Active Cases of COVID-19</Typography>\n          </CardContent>\n        </Grid>\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n          <CardContent>\n            <Typography color = \"textSecondary\" gutterBottom> Recovered</Typography>\n            <Typography variant = \"h5\" >\n              <CountUp\n                start = {0}\n                end = {recovered.value}\n                duration = {2.5}\n                separator =\",\"\n              ></CountUp>\n            </Typography>\n            <Typography color = \"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\n            <Typography variant = \"body2\">Number of Recovered Cases of COVID-19</Typography>\n          </CardContent>\n        </Grid>\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n          <CardContent>\n            <Typography color = \"textSecondary\" gutterBottom>Deaths</Typography>\n            <Typography variant = \"h5\" >\n              <CountUp\n                start = {0}\n                end = {deaths.value}\n                duration = {2.5}\n                separator =\",\"\n              ></CountUp>\n            </Typography>\n            <Typography color = \"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\n            <Typography variant = \"body2\">Number of Deaths caused by COVID-19</Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default Cards;\n","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n  if(country){\n    changeableUrl = `${url}/countries/${country}`\n  }\n  try{\n    const {data} = await axios.get(changeableUrl);\n    const modifiedData = {\n      confirmed : data.confirmed,\n      recovered : data.recovered,\n      deaths : data.deaths,\n      lastUpdate : data.lastUpdate\n    }\n    return modifiedData;\n\n  }catch(error){\n    console.log(error);\n  }\n}\n\nexport const fetchDailyData = async ()=>{\n  try{\n    const {data} = await axios.get(`${url}/daily`);\n    const modifiedData = data.map((dailyData)=>({\n      confirmed : dailyData.confirmed.total,\n      deaths : dailyData.deaths.total,\n      date : dailyData.deaths.total,\n    }));\n    return modifiedData;\n\n  }catch(error){\n\n  }\n}\n\nexport const fetchCountries = async ()=>{\n  try{\n    const {data:{countries}} = await axios.get(`${url}/countries`);\n    return countries.map((country)=> country.name);\n\n  }catch(error){\n\n  }\n}\n","import React, {useState, useEffect} from 'react';\nimport {fetchDailyData} from '../../api';\nimport {Line, Bar} from 'react-chartjs-2';\nimport styles from './Charts.module.css'\n\n\nconst Charts = ({data:{confirmed, recovered, deaths}, country}) => {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(()=>{\n    const fetchAPI = async ()=>{\n      setDailyData(await fetchDailyData());\n    }\n    fetchAPI();\n  },[]);\n\n  const lineChart = (\n    dailyData.length!==0?(<Line\n      data = {{\n        labels:dailyData.map(({date})=>date),\n        datasets:[{\n          data:dailyData.map(({confirmed})=>confirmed),\n          label: 'Infected',\n          borderColor : '#3333ff',\n          fill: true,\n        },{\n          data:dailyData.map(({deaths})=>deaths),\n          label: 'Deaths',\n          borderColor : '#red',\n          backgroundColor: 'rgba(255,0,0,0.5)',\n          fill: true,\n        }],\n      }}\n    >\n    </Line>):null\n  );\n\n  const barChart = (\n    confirmed?(<Bar\n      data = {{\n        labels:['Infected', 'Recovered', 'Deaths'],\n        datasets:[{\n          data:[confirmed.value, recovered.value, deaths.value],\n          label: 'People',\n          backgroundColor: [`rgba(0,0,255,0.5)`, `rgba(0,255,0,0.5)`, `rgba(255,0,0,0.5)`],\n          fill: true,\n        }],\n      }}\n      options={{\n        legend:{display:false},\n        title:{display: true, text:`Current state in ${country}`},\n      }}\n    >\n    </Bar>):null\n  );\n\n  return(\n    <div className={styles.container}>\n      {country?barChart:lineChart}\n    </div>\n  )\n}\n\nexport default Charts;\n","import React, {useState, useEffect} from 'react';\nimport {NativeSelect, FormControl} from '@material-ui/core';\nimport styles from './CountryPicker.module.css'\nimport {fetchCountries} from '../../api';\n\nconst CountryPicker = ({handleCountryChange}) => {\n\n  const [fetchedCountries, setFetchedCountries] = useState([]);\n\n  useEffect(()=>{\n    const fetchAPI = async () => {\n      setFetchedCountries(await fetchCountries())\n    }\n    fetchAPI();\n  },[setFetchedCountries]);\n\n  return(\n    <FormControl className = {styles.formControl}>\n      <NativeSelect defaultValue = \"\" onChange={(e)=>{handleCountryChange(e.target.value)}}>\n        <option value = \"\">Global</option>\n        {fetchedCountries.map((country,i)=><option key={i} value = {country}>{country}</option>)}\n      </NativeSelect>\n    </FormControl>\n  )\n}\n\nexport default CountryPicker;\n","import React from 'react';\nimport {  Cards, Charts, CountryPicker } from './components'\nimport styles from './App.module.css';\nimport {fetchData} from './api'\nimport coronaImage from './images/image.png'\n\nclass App extends React.Component{\n\n  state = {\n    data : {},\n    country:'',\n  }\n\n  async componentDidMount(){\n      const fetchedData = await fetchData();\n      console.log(fetchedData);\n      this.setState({\n        data:fetchedData\n      })\n  }\n\n  handleCountryChange = async (country)=>{\n    // fetch the data\n    const fetchedData = await fetchData(country);\n    this.setState({\n      data:fetchedData,\n      country:country,\n    })\n    // set the state\n  }\n\n  render(){\n    const {data, country} = this.state;\n    return(\n      <div className={styles.container}>\n        <img className={styles.image} alt=\"COVID-19\" src={coronaImage}></img>\n        <Cards data = {data}></Cards>\n        <CountryPicker handleCountryChange={this.handleCountryChange}></CountryPicker>\n        <Charts data = {data} country={country}></Charts>\n        <p>Source: https://covid19.mathdro.id/api</p>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1mZfu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}